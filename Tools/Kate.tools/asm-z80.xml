<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<!--
  Z80 assembly syntax (trying to cover several assemblers: pasmo, sjasm, z80, snasm, ...)

  Created: Peter Helcmanovsky <ped@7gods.org>
  Version: 0.5 19/01/2019

Changelog:
  // dd/mm/yyyy: version x.y (keep changelog in descending order)
  //   what was modified

  19/01/2019: version 0.5
    + "error" context added to report unexpected arguments on remaining line (only *FEW*
        cases are detected at the moment, it's nowhere near checking syntax properly)
    + Unofficial Z80 instructions highlighted as different category (dsExtension)
    + extra category for Z80N instructions (and Z80N control-flow instruction)
        (highlights as ordinary instructions by default, user can manually adjust colors)
    + string highlight separated for apostrophe and quotes (other will be part of string)
    + "hex" directive - improved check marking extra digit/non-digit as error
    + couple of instructions detection improved (adding "error" context for arguments,etc)

    This is probably one of last versions trying to stay "universal", as it works
    considerably well for me (after about one month of using it actively), future
    revisions will probably focus to narrow down syntax into more strict mode,
    preferring my desired code style, and particular assembler ("pasmoNext" probably).

    Missing bits:
    - argument highlighting (symbols, operators, ...) and validation of expected number
        of arguments, etc... = of little importance to me personally, probably never
    - macro/equ/label symbols differentiation = I would *love* these, but they are not
        possible with current Kate highlighting, as it would require extra input injected
        by editor through some new API, to provide list of various (type) symbols.

  06/01/2019: version 0.2
    + instructions split into general group and control-flow group
    + comments now have TODO/FIXME/FIX ME highlighting support

  30/12/2018: version 0.1
    Initial version, released as part of ZXNextTests project (as "work in progress")
-->
<language name="Z80 (pasmo, sjasm, ...)" section="Assembler" version="3" kateversion="5.0" extensions="*.asm" mimetype="" author="Peter Helcmanovsky (ped@7gods.org)" license="MIT">
  <!-- TODO
    pasmo: PC, $, local labels, "??" operator (banknum) ... all operators having extra style?
    sjasm: many IFcc, ELSEIFcc variants
    Label identifiers into some xml macro (entities were in docs?).
    Split per assembler, because each is accepting huge amount of variations of syntax and
    universal highlighting is then huge mess.

    when more finished, try to propose to upstream: https://github.com/KDE/syntax-highlighting/tree/master/data/syntax
  -->
  <highlighting>
    <list name="registers">
      <!-- General purpose registers -->
      <item>a</item>
      <item>b</item>
      <item>c</item>
      <item>d</item>
      <item>e</item>
      <item>h</item>
      <item>l</item>
      <item>ixh</item>
      <item>ixl</item>
      <item>iyh</item>
      <item>iyl</item>
      <item>af</item>
      <item>bc</item>
      <item>de</item>
      <item>hl</item>
      <item>ix</item>
      <item>iy</item>
      <item>sp</item>
      <!-- Shadow registers (only af' can be used directly in instruction) -->
      <item>af'</item>
      <item>bc'</item>
      <item>de'</item>
      <item>hl'</item>
      <!-- Special registers -->
      <item>i</item>
      <item>r</item>
    </list>
    <list name="flow-instructions">
      <item>call</item>
      <item>djnz</item>
      <item>halt</item>
      <item>jp</item>
      <item>jr</item>
      <item>ret</item>
      <item>reti</item>
      <item>retn</item>
      <item>rst</item>
    </list>
    <list name="instructions">
      <item>adc</item>
      <item>add</item>
      <item>and</item>
      <item>bit</item>
      <item>ccf</item>
      <item>cp</item>
      <item>cpd</item>
      <item>cpdr</item>
      <item>cpi</item>
      <item>cpir</item>
      <item>cpl</item>
      <item>daa</item>
      <item>dec</item>
      <item>di</item>
      <item>ei</item>
      <item>ex</item>
      <item>exx</item>
      <item>im</item>
      <item>in</item>
      <item>inc</item>
      <item>ind</item>
      <item>indr</item>
      <item>ini</item>
      <item>inir</item>
      <item>ld</item>
      <item>ldd</item>
      <item>lddr</item>
      <item>ldi</item>
      <item>ldir</item>
      <item>neg</item>
      <item>nop</item>
      <item>or</item>
      <item>otdr</item>
      <item>otir</item>
      <item>out</item>
      <item>outd</item>
      <item>outi</item>
      <item>pop</item>
      <item>push</item>
      <item>res</item>
      <item>rl</item>
      <item>rla</item>
      <item>rlc</item>
      <item>rlca</item>
      <item>rld</item>
      <item>rr</item>
      <item>rra</item>
      <item>rrc</item>
      <item>rrca</item>
      <item>rrd</item>
      <item>sbc</item>
      <item>scf</item>
      <item>set</item>
      <item>sla</item>
      <item>sra</item>
      <item>srl</item>
      <item>sub</item>
      <item>xor</item>
    </list>
    <list name="instructions-unofficial">
      <!-- Unofficial instructions -->
      <item>sl1</item>
      <!-- some alias version of instructions (sl1, sla) -->
      <item>sli</item>
      <item>sll</item>
    </list>
    <list name="instructions-z80n">
      <!-- ZX Spectrum Next (Z80N) extra instructions -->
      <item>brlc</item>
      <item>bsla</item>
      <item>bsra</item>
      <item>bsrf</item>
      <item>bsrl</item>
      <item>lddrx</item>
      <item>lddx</item>
      <item>ldirx</item>
      <item>ldix</item>
      <item>ldpirx</item>
      <item>ldws</item>
      <item>mirror</item>
      <item>mul</item>
      <item>nextreg</item>
      <item>outinb</item>
      <item>pixelad</item>
      <item>pixeldn</item>
      <item>setae</item>
      <item>swapnib</item>
      <item>test</item>
      <!-- some alias version of instructions (swapnib, mul, test) -->
      <item>swap</item>
      <item>mlt</item>
      <item>tst</item>
    </list>
    <list name="data">
      <!-- Initialized data -->
      <item>byte</item>
      <item>db</item>
      <item>defb</item>
      <item>defm</item>
      <item>dc</item>
      <item>dz</item>
      <item>hex</item>
      <item>abyte</item>
      <item>abytec</item>
      <item>abytez</item>
      <item>word</item>
      <item>dw</item>
      <item>defw</item>
      <item>dt</item>
      <item>dword</item>
      <item>dd</item>
      <item>defd</item>
      <item>ds</item>
      <item>defs</item>
      <item>block</item>
      <item>rsset</item>
      <item>ascmap</item>
      <item>asc</item>
      <item>ascc</item>
      <item>ascz</item>
      </list>
    <list name="directives">
      <!-- pasmo directives -->
      <item>.error</item>
      <item>.shift</item>
      <item>.warning</item>
      <item>defl</item>
      <item>else</item>
      <item>end</item>
      <item>endif</item>
      <item>endm</item>
      <item>endp</item>
      <item>equ</item>
      <item>exitm</item>
      <item>if</item>
      <item>include</item>
      <item>incbin</item>
      <item>irp</item>
      <item>local</item>
      <item>macro</item>
      <item>org</item>
      <item>proc</item>
      <item>public</item>
      <item>rept</item>
      <!-- pasmo-next extra directives -->
      <item>savebin</item>
      <item>message</item>
      <item>align</item>
      <item>setbank</item>
      <item>currentbank</item>
      <!-- pasmo operators (eq,ne,lt,le,gt,ge skipped), TODO: highlight operators? -->
      <item>nul</item>
      <item>defined</item>
      <item>mod</item>
      <item>shl</item>
      <item>shr</item>
      <item>not</item>
      <item>high</item>
      <item>low</item>
      <!-- sjasm directives (not covered by pasmo!) -->
      <item>device</item>
      <item>ifdef</item>
      <item>define</item>
      <item>xdefine</item>
      <item>idefine</item>
      <item>xidefine</item>
      <item>while</item>
      <item>endwhile</item>
      <item>repeat</item>
      <item>endrepeat</item>
      <item>endmacro</item>
      <item>module</item>
      <item>endmodule</item>
      <item>map</item>
      <item>endmap</item>
      <item>mapalign</item>
      <item>struct</item>
      <item>endstruct</item>
      <item>ends</item>
      <item>output</item>
      <item>defpage</item>
      <item>page</item>
      <item>code</item>
      <item>update</item>
      <item>incdir</item>
      <item>elseif</item>
      <!-- many IF and ELSEIF variants... not included, because I want v0.1 done ASAP -->
      <item>break</item>
      <item>continue</item>
      <item>assign</item>
      <item>undef</item>
      <item>imacro</item>
      <!-- snasm directives (not covered yet) -->
      <item>pcorg</item>
      <item>def</item>
      <item>rb</item>
      <item>rw</item>
      <item>rsreset</item>
      <item>seg</item>
      <item>savesna</item>
      <item>savenex</item>
      <item>opt</item>
      <!-- snasm operators TODO: highlight operators? -->
      <item>lo</item>
      <item>hi</item>
      <item>filesize</item>
    </list>
    <contexts>
      <context name="Normal" attribute="Normal Text" lineEndContext="#stay"
               lineEmptyContext="#stay" fallthrough="true" fallthroughContext="Arguments">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <RegExpr attribute="Z80N Flow ins." context="Error" insensitive="true"
                 String="jp\s+\(c\)\s*"/>
        <RegExpr attribute="Data" context="Hexastring" insensitive="true" String="hex\s+"/>
        <RegExpr attribute="Control Flow ins." context="Arguments" insensitive="true"
                 String="(call|jp)\s+(nz|z|nc|c|po|pe|p|m|ns|s)\s*,"/>
        <RegExpr attribute="Control Flow ins." context="Arguments" insensitive="true"
                 String="jr\s+(nz|z|nc|c)\s*,"/>
        <RegExpr attribute="Control Flow ins." context="Error" insensitive="true"
                 String="ret\s+(nz|z|nc|c|po|pe|p|m|ns|s)\b\s*"/>
        <RegExpr attribute="Unofficial ins." context="Error" insensitive="true"
                 String="(in\s+(f,\s*|)\(c\)|out\s+\(c\),0\b)\s*"/>
        <RegExpr attribute="Unofficial ins." context="Error" insensitive="true"
                 String="(rlc|rrc|rl|rr|sla|sll|sra|sli|sl1|srl)\s+\(\s*(ix|iy)\s*(\+|\-)[^;]*\),\s*[a-ehl]\b\s*"/>
        <RegExpr attribute="Unofficial ins." context="Error" insensitive="true"
                 String="(res|set)\s+[0-7],\s*\(\s*(ix|iy)\s*(\+|\-)[^;]*\),\s*[a-ehl]\b\s*"/>
        <RegExpr attribute="Unofficial ins." context="Error" insensitive="true"
                 String="(inc|dec|sub|and|or|xor|cp)\s+i[xy][lh]\b\s*"/>
        <RegExpr attribute="Unofficial ins." context="Error" insensitive="true"
                 String="(add|adc|sub|and|or|xor|cp)\s+a,\s*i[xy][lh]\b\s*"/>
        <RegExpr attribute="Unofficial ins." context="Arguments" insensitive="true"
                 String="ld\s+i[xy][lh],\s*"/>
        <RegExpr attribute="Unofficial ins." context="Error" insensitive="true"
                 String="ld\s+[a-e],\s*i[xy][lh]\b\s*"/>
        <keyword attribute="Control Flow ins." context="Arguments" String="flow-instructions"/>
        <keyword attribute="Unofficial ins." context="Arguments" String="instructions-unofficial"/>
        <keyword attribute="Z80N Instructions" context="Arguments" String="instructions-z80n"/>
        <keyword attribute="Instructions" context="Arguments" String="instructions"/>
        <keyword attribute="Data" context="Arguments" String="data"/>
        <keyword attribute="Directives" context="Arguments" String="directives"/>
        <DetectChar attribute="Comment" context="Comment" char=";"/>
        <Detect2Chars attribute="Comment" context="Comment" char="/" char1="/"/>
        <RegExpr attribute="Label" context="#stay" firstNonSpace="true"
                 String="(\.|!|@|!@|)[A-Za-z_][A-Za-z0-9_.$]*:?"/>
        <RegExpr attribute="Label" context="#stay" String="^[0-9]+(\s+|$)"/>
      </context>
      <context name="Error" attribute="Error" lineEndContext="#pop">
        <DetectChar attribute="Comment" context="Comment" char=";"/>
        <Detect2Chars attribute="Comment" context="Comment" char="/" char1="/"/>
      </context>
      <context name="Hexastring" attribute="Normal Text" lineEndContext="#pop"
               fallthrough="true" fallthroughContext="Error">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <RegExpr attribute="BaseN" context="#stay" String="([0-9A-Fa-f]{2})+"/>
        <DetectChar attribute="Comment" context="Comment" char=";"/>
        <Detect2Chars attribute="Comment" context="Comment" char="/" char1="/"/>
      </context>
      <context name="Arguments" attribute="Normal Text" lineEndContext="#pop">
        <DetectChar attribute="Comment" context="Comment" char=";"/>
        <Detect2Chars attribute="Comment" context="Comment" char="/" char1="/"/>
        <DetectChar attribute="String" context="StringApostrophe" char="'"/>
        <DetectChar attribute="String" context="String" char="&quot;"/>
        <keyword attribute="Registers" context="#stay" String="registers"/>
        <RegExpr attribute="Label" context="#stay" String="(\.|@|)[A-Za-z_][A-Za-z0-9_.$]*"/>
        <!-- hexadecimal numbers -->
        <RegExpr attribute="BaseN" context="#stay" insensitive="true" String="((\$|0x|#){1}[a-f0-9]+|[0-9]+[a-f0-9]*h)"/>
        <!-- octal numbers -->
        <RegExpr attribute="BaseN" context="#stay" insensitive="true" String="(\?[0-7]+|[0-7]+(q|o))"/>
        <!-- binary numbers -->
        <RegExpr attribute="BaseN" context="#stay" insensitive="true" String="(%[0-1][0-1_]*|[0-1][0-1_]*b)"/>
        <Int attribute="Number" context="#stay"/>
        <DetectChar attribute="Number" context="#stay" char="$"/>
<!--        <HlCHex attribute="BaseN" context="#stay"/>-->
        <HlCChar attribute="Char" context="#stay"/>
      </context>
      <context name="Comment" attribute="Comment" lineEndContext="#pop">
          <RegExpr attribute="Alert" context="#stay" String="\b(TODO|FIX\s?ME)\b"/>
      </context>
      <context name="String" attribute="String" lineEndContext="#pop">
        <DetectChar attribute="String" context="#pop" char="&quot;"/>
      </context>
      <context name="StringApostrophe" attribute="String" lineEndContext="#pop">
        <DetectChar attribute="String" context="#pop" char="'"/>
      </context>
    </contexts>

    <itemDatas>
      <itemData name="Normal Text" defStyleNum="dsNormal"/>
      <itemData name="Error" defStyleNum="dsError"/>
      <itemData name="Registers" defStyleNum="dsVariable"/>
      <itemData name="Instructions" defStyleNum="dsKeyword"/>
      <itemData name="Unofficial ins." defStyleNum="dsExtension"/>
      <itemData name="Z80N Instructions" defStyleNum="dsKeyword"/>
      <itemData name="Z80N Flow ins." defStyleNum="dsControlFlow"/>
      <itemData name="Control Flow ins." defStyleNum="dsControlFlow"/>
      <itemData name="Directives" defStyleNum="dsPreprocessor"/>
      <itemData name="Comment" defStyleNum="dsComment"/>
      <itemData name="Alert" defStyleNum="dsAlert"/>
      <itemData name="Label" defStyleNum="dsFunction"/>
      <itemData name="Data" defStyleNum="dsDataType"/>
      <itemData name="BaseN" defStyleNum="dsBaseN"/>
      <itemData name="Float" defStyleNum="dsFloat"/>
      <itemData name="Number" defStyleNum="dsDecVal"/>
      <itemData name="Char" defStyleNum="dsChar"/>
      <itemData name="String" defStyleNum="dsString"/>
    </itemDatas>
  </highlighting>
  <general>
    <keywords casesensitive="0"/>
    <comments>
      <comment name="singleLine" start=";"/>
    </comments>
  </general>
</language>
<!-- kate: space-indent on; indent-width 4; replace-tabs on; -->
